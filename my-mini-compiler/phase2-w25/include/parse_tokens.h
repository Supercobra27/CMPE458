#ifndef PARSE_TOKENS_H
#define PARSE_TOKENS_H
#include "tokens.h"

typedef enum _ParseToken {
    PT_EOF,
    PT_EPSILON,
    PT_IDENTIFIER,
    PT_INTEGER_CONST,
    PT_FLOAT_CONST,
    PT_STRING_CONST,
    PT_INT_KEYWORD,
    PT_FLOAT_KEYWORD,
    PT_STRING_KEYWORD,
    PT_SEMICOLON,
    PT_LEFT_BRACE,
    PT_RIGHT_BRACE,
    PT_PRINT_KEYWORD,
    PT_IF_KEYWORD,
    PT_THEN,
    PT_ELSE_KEYWORD,
    PT_WHILE_KEYWORD,
    PT_REPEAT_KEYWORD,
    PT_UNTIL_KEYWORD,
    PT_FACTORIAL_KEYWORD,
    PT_LEFT_PAREN,
    PT_RIGHT_PAREN,

    PT_PROGRAM,
    PT_STATEMENT_LIST,
    PT_STATEMENT,
    PT_EMPTY_STATEMENT,
    PT_DECLARATION,
    PT_EXPRESSION_STATEMENT,
    PT_PRINT_STATEMENT,
    PT_BLOCK,
    PT_CONDITIONAL,
    PT_WHILE_LOOP,
    PT_REPEAT_UNTIL_LOOP,

    PT_IF_THEN_ELSE,
    PT_IF_THEN,

    PT_STATEMENT_END,
    PT_TYPE_KEYWORD,
    PT_EXPRESSION,
    PT_BLOCK_BEGIN,
    PT_BLOCK_END,
    PT_WHILE,
    PT_REPEATUNTIL,

    /* Expressions */
    PT_ASSIGNMENTEX_R12,
    PT_OREX_L11,
    PT_ANDEX_L10,
    PT_BITOREX_L9,
    PT_BITXOREX_L8,
    PT_BITANDEX_L7,
    PT_RELATIONEX_L6,
    PT_SHIFTEX_L5,
    PT_SUMEX_L4,
    PT_PRODUCTEX_L3,
    PT_UNARYPREFIXEX_R2,
    PT_FACTOR,


    PT_ASSIGNMENT_OPERATOR,
    PT_OR_OPERATOR,
    PT_AND_OPERATOR,
    PT_BITOR_OPERATOR,
    PT_BITXOR_OPERATOR,
    PT_BITAND_OPERATOR,
    PT_RELATIONAL_OPERATOR,
    PT_SHIFT_OPERATOR,
    PT_SUM_OPERATOR,
    PT_PRODUCT_OPERATOR,
    PT_UNARY_PREFIX_OPERATOR,

    PT_IMMUTABLE,
    PT_MUTABLE,

    PT_FACTORIAL_CALL,
    PT_CONSTANT,
} ParseToken;

typedef enum _ParseErrorType {
    PARSE_ERROR_WRONG_TOKEN,
} ParseErrorType;

typedef struct _ParseTreeNode {
    ParseToken type;
    ParseTreeNode *children; // Null-terminated array of children.
    Token *token; // Token in the case of a terminal node.
    ParseErrorType error;
} ParseTreeNode;
    

#endif /* PARSE_TOKENS_H */